<?php

/**
 * @file
 * Functions to support theming in the Sample Theme theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function sample_theme_preprocess_html(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function sample_theme_preprocess_page(&$variables) {
  
}

/**
 * Implements hook_theme_suggestions_hook_alter for page.html.twig.
 */
function sample_theme_theme_suggestions_page_alter(&$suggestions, &$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $term = \Drupal::routeMatch()->getParameter('taxonomy_term');

  if (isset($node)) {
    if ($node->hasField('layout_builder__layout')) {
      $suggestions[] = 'page__layout_builder';
    }
  }
  elseif (isset($term)) {
    if ($term->hasField('layout_builder__layout')) {
      $suggestions[] = 'page__layout_builder';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK()
 */
function sample_theme_preprocess_block(&$variables) {

  // Put RFI Webform in the sidebar
  if (array_key_exists('webform_id', $variables['configuration']) &&
    $variables['configuration']['webform_id'] == 'request_for_information') {
    $variables['configuration']['in_sidebar'] = true;
  }
}


/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function sample_theme_preprocess_region(&$variables) {

}


/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function sample_theme_preprocess_node(&$variables) {
  $node = $variables['node'];
  $type = $variables['node']->getType();

  // Redirect events that have an external link for anonymous users
  if ($type == 'event') {

    $external_link = $variables['node']->field_e_external_link->uri;
    $user_roles = $variables['user']->getRoles();
    $variables['show_message'] = false;

    if ($external_link !== null) {
      // Invalidate the cache for these nodes because the redirect will not fire otherwise
      $variables['#cache']['max-age'] = 0;
      if ($user_roles[0] == 'anonymous') {
        $response = new Symfony\Component\HttpFoundation\RedirectResponse($external_link);
      }
      else {
        $variables['show_message'] = true;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK()
 */
function sample_theme_preprocess_media(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK()
 */
function sample_theme_preprocess_image(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK()
 */
function sample_theme_preprocess_entity_embed_container(&$variables) {
  $class_length = count($variables['attributes']['class']);

  // Prepare classes to follow BEM structure
  for ($i=0;$i<$class_length;$i++) {
    if ($variables['attributes']['class'][$i] === 'embedded-entity') {
      $variables['attributes']['class'][$i] = 'content__embedded-entity';
    } else {
      $variables['attributes']['class'][$i] = '-'.$variables['attributes']['class'][$i];
    }
  }

}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function sample_theme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {

  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}


/**
 * Implements hook_form_alter()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */

function sample_theme_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  if (preg_match('/^webform_submission_.*/', $form_id)) {
    if (preg_match('/^webform_submission_request_for_information.*/', $form_id)) {
      $form['#attributes']['in_sidebar'][] = true;
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function sample_theme_theme_suggestions_form_element_alter(array &$suggestions, array &$variables, $hook) {

  if (array_key_exists('#webform', $variables['element'])
    || !array_key_exists('#form_id', $variables['element'])
  ) {
    $suggestions[] = $hook . '__webform';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function sample_theme_theme_suggestions_input_alter(array &$suggestions, array &$variables, $hook) {

  $suggestions[] = $hook . '__webform';

}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function sample_theme_theme_suggestions_views_view_alter(array &$suggestions, array &$variables, $hook) {

  $current_display = $variables['view']->current_display;
  if (preg_match('/^block_p_.*_programs_grid$/', $current_display)) {
    $suggestions[] = $hook . '__block_programs_grid';
  }

  if (preg_match('/^block_events_.*_events_listing$/', $current_display)) {
    $suggestions[] = $hook . '__block_events_grid';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function sample_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array &$variables, $hook) {

  $current_display = $variables['view']->current_display;
  if (preg_match('/^block_p_.*_programs_grid$/', $current_display)) {
    $suggestions[] = $hook . '__block_programs_grid';
  }

  if (preg_match('/^block_events_.*_events_listing$/', $current_display)) {
    $suggestions[] = $hook . '__block_events_grid';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function sample_theme_theme_suggestions_views_view_fields_alter(array &$suggestions, array &$variables, $hook) {

  $current_display = $variables['view']->current_display;
  if (preg_match('/^block_p_.*_programs_grid$/', $current_display)) {
    $suggestions[] = $hook . '__block_programs_grid';
  }

  if (preg_match('/^block_events_.*_events_listing$/', $current_display)) {
    $suggestions[] = $hook . '__block_events_grid';
  }
}
